// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/secreports/v1/secreports_service.proto

package secreportsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecReportsService_UpsertAuditQuery_FullMethodName         = "/teleport.secreports.v1.SecReportsService/UpsertAuditQuery"
	SecReportsService_GetAuditQuery_FullMethodName            = "/teleport.secreports.v1.SecReportsService/GetAuditQuery"
	SecReportsService_ListAuditQuery_FullMethodName           = "/teleport.secreports.v1.SecReportsService/ListAuditQuery"
	SecReportsService_DeleteAuditQuery_FullMethodName         = "/teleport.secreports.v1.SecReportsService/DeleteAuditQuery"
	SecReportsService_UpsertSecurityReport_FullMethodName     = "/teleport.secreports.v1.SecReportsService/UpsertSecurityReport"
	SecReportsService_GetSecurityReport_FullMethodName        = "/teleport.secreports.v1.SecReportsService/GetSecurityReport"
	SecReportsService_ListSecurityReport_FullMethodName       = "/teleport.secreports.v1.SecReportsService/ListSecurityReport"
	SecReportsService_DeleteSecurityReport_FullMethodName     = "/teleport.secreports.v1.SecReportsService/DeleteSecurityReport"
	SecReportsService_RunAuditQuery_FullMethodName            = "/teleport.secreports.v1.SecReportsService/RunAuditQuery"
	SecReportsService_GetSchema_FullMethodName                = "/teleport.secreports.v1.SecReportsService/GetSchema"
	SecReportsService_RunSecurityReport_FullMethodName        = "/teleport.secreports.v1.SecReportsService/RunSecurityReport"
	SecReportsService_GetSecurityReportDetails_FullMethodName = "/teleport.secreports.v1.SecReportsService/GetSecurityReportDetails"
)

// SecReportsServiceClient is the client API for SecReportsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecReportsServiceClient interface {
	// UpsertAuditQuery is ..
	UpsertAuditQuery(ctx context.Context, in *UpsertAuditQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetAuditQuery is ..
	GetAuditQuery(ctx context.Context, in *GetAuditQueryRequest, opts ...grpc.CallOption) (*AuditQuery, error)
	// rpc ListAuditQuery(ListAuditQueryRequest) returns (ListAuditQueryResponse); returns a paginated list of all Okta import rule resources.
	ListAuditQuery(ctx context.Context, in *ListAuditQueryRequest, opts ...grpc.CallOption) (*ListAuditQueryResponse, error)
	// DeleteAuditQuery is ..
	DeleteAuditQuery(ctx context.Context, in *DeleteAuditQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertSecurityReport is ..
	UpsertSecurityReport(ctx context.Context, in *UpsertSecurityReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetSecurityReport is ..
	GetSecurityReport(ctx context.Context, in *GetSecurityReportRequest, opts ...grpc.CallOption) (*SecurityReport, error)
	// ListSecurityReport returns a paginated list of all Okta import rule resources.
	ListSecurityReport(ctx context.Context, in *ListSecurityReportRequest, opts ...grpc.CallOption) (*ListSecurityReportResponse, error)
	// DeleteAuditQuery is ..
	DeleteSecurityReport(ctx context.Context, in *DeleteSecurityReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RunAuditQuery is
	RunAuditQuery(ctx context.Context, in *RunAuditQueryRequest, opts ...grpc.CallOption) (*RunAuditQueryResponse, error)
	// GetSchema ..
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	// RunSecurityReports runs a security reports;
	RunSecurityReport(ctx context.Context, in *RunSecurityReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetSecurityReportsDetails is
	GetSecurityReportDetails(ctx context.Context, in *GetSecurityReportDetailsRequest, opts ...grpc.CallOption) (*GetSecurityReportDetailsResponse, error)
}

type secReportsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecReportsServiceClient(cc grpc.ClientConnInterface) SecReportsServiceClient {
	return &secReportsServiceClient{cc}
}

func (c *secReportsServiceClient) UpsertAuditQuery(ctx context.Context, in *UpsertAuditQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecReportsService_UpsertAuditQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) GetAuditQuery(ctx context.Context, in *GetAuditQueryRequest, opts ...grpc.CallOption) (*AuditQuery, error) {
	out := new(AuditQuery)
	err := c.cc.Invoke(ctx, SecReportsService_GetAuditQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) ListAuditQuery(ctx context.Context, in *ListAuditQueryRequest, opts ...grpc.CallOption) (*ListAuditQueryResponse, error) {
	out := new(ListAuditQueryResponse)
	err := c.cc.Invoke(ctx, SecReportsService_ListAuditQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) DeleteAuditQuery(ctx context.Context, in *DeleteAuditQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecReportsService_DeleteAuditQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) UpsertSecurityReport(ctx context.Context, in *UpsertSecurityReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecReportsService_UpsertSecurityReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) GetSecurityReport(ctx context.Context, in *GetSecurityReportRequest, opts ...grpc.CallOption) (*SecurityReport, error) {
	out := new(SecurityReport)
	err := c.cc.Invoke(ctx, SecReportsService_GetSecurityReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) ListSecurityReport(ctx context.Context, in *ListSecurityReportRequest, opts ...grpc.CallOption) (*ListSecurityReportResponse, error) {
	out := new(ListSecurityReportResponse)
	err := c.cc.Invoke(ctx, SecReportsService_ListSecurityReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) DeleteSecurityReport(ctx context.Context, in *DeleteSecurityReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecReportsService_DeleteSecurityReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) RunAuditQuery(ctx context.Context, in *RunAuditQueryRequest, opts ...grpc.CallOption) (*RunAuditQueryResponse, error) {
	out := new(RunAuditQueryResponse)
	err := c.cc.Invoke(ctx, SecReportsService_RunAuditQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, SecReportsService_GetSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) RunSecurityReport(ctx context.Context, in *RunSecurityReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecReportsService_RunSecurityReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secReportsServiceClient) GetSecurityReportDetails(ctx context.Context, in *GetSecurityReportDetailsRequest, opts ...grpc.CallOption) (*GetSecurityReportDetailsResponse, error) {
	out := new(GetSecurityReportDetailsResponse)
	err := c.cc.Invoke(ctx, SecReportsService_GetSecurityReportDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecReportsServiceServer is the server API for SecReportsService service.
// All implementations must embed UnimplementedSecReportsServiceServer
// for forward compatibility
type SecReportsServiceServer interface {
	// UpsertAuditQuery is ..
	UpsertAuditQuery(context.Context, *UpsertAuditQueryRequest) (*emptypb.Empty, error)
	// GetAuditQuery is ..
	GetAuditQuery(context.Context, *GetAuditQueryRequest) (*AuditQuery, error)
	// rpc ListAuditQuery(ListAuditQueryRequest) returns (ListAuditQueryResponse); returns a paginated list of all Okta import rule resources.
	ListAuditQuery(context.Context, *ListAuditQueryRequest) (*ListAuditQueryResponse, error)
	// DeleteAuditQuery is ..
	DeleteAuditQuery(context.Context, *DeleteAuditQueryRequest) (*emptypb.Empty, error)
	// UpsertSecurityReport is ..
	UpsertSecurityReport(context.Context, *UpsertSecurityReportRequest) (*emptypb.Empty, error)
	// GetSecurityReport is ..
	GetSecurityReport(context.Context, *GetSecurityReportRequest) (*SecurityReport, error)
	// ListSecurityReport returns a paginated list of all Okta import rule resources.
	ListSecurityReport(context.Context, *ListSecurityReportRequest) (*ListSecurityReportResponse, error)
	// DeleteAuditQuery is ..
	DeleteSecurityReport(context.Context, *DeleteSecurityReportRequest) (*emptypb.Empty, error)
	// RunAuditQuery is
	RunAuditQuery(context.Context, *RunAuditQueryRequest) (*RunAuditQueryResponse, error)
	// GetSchema ..
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	// RunSecurityReports runs a security reports;
	RunSecurityReport(context.Context, *RunSecurityReportRequest) (*emptypb.Empty, error)
	// GetSecurityReportsDetails is
	GetSecurityReportDetails(context.Context, *GetSecurityReportDetailsRequest) (*GetSecurityReportDetailsResponse, error)
	mustEmbedUnimplementedSecReportsServiceServer()
}

// UnimplementedSecReportsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecReportsServiceServer struct {
}

func (UnimplementedSecReportsServiceServer) UpsertAuditQuery(context.Context, *UpsertAuditQueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAuditQuery not implemented")
}
func (UnimplementedSecReportsServiceServer) GetAuditQuery(context.Context, *GetAuditQueryRequest) (*AuditQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditQuery not implemented")
}
func (UnimplementedSecReportsServiceServer) ListAuditQuery(context.Context, *ListAuditQueryRequest) (*ListAuditQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditQuery not implemented")
}
func (UnimplementedSecReportsServiceServer) DeleteAuditQuery(context.Context, *DeleteAuditQueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuditQuery not implemented")
}
func (UnimplementedSecReportsServiceServer) UpsertSecurityReport(context.Context, *UpsertSecurityReportRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSecurityReport not implemented")
}
func (UnimplementedSecReportsServiceServer) GetSecurityReport(context.Context, *GetSecurityReportRequest) (*SecurityReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityReport not implemented")
}
func (UnimplementedSecReportsServiceServer) ListSecurityReport(context.Context, *ListSecurityReportRequest) (*ListSecurityReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityReport not implemented")
}
func (UnimplementedSecReportsServiceServer) DeleteSecurityReport(context.Context, *DeleteSecurityReportRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityReport not implemented")
}
func (UnimplementedSecReportsServiceServer) RunAuditQuery(context.Context, *RunAuditQueryRequest) (*RunAuditQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAuditQuery not implemented")
}
func (UnimplementedSecReportsServiceServer) GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedSecReportsServiceServer) RunSecurityReport(context.Context, *RunSecurityReportRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSecurityReport not implemented")
}
func (UnimplementedSecReportsServiceServer) GetSecurityReportDetails(context.Context, *GetSecurityReportDetailsRequest) (*GetSecurityReportDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityReportDetails not implemented")
}
func (UnimplementedSecReportsServiceServer) mustEmbedUnimplementedSecReportsServiceServer() {}

// UnsafeSecReportsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecReportsServiceServer will
// result in compilation errors.
type UnsafeSecReportsServiceServer interface {
	mustEmbedUnimplementedSecReportsServiceServer()
}

func RegisterSecReportsServiceServer(s grpc.ServiceRegistrar, srv SecReportsServiceServer) {
	s.RegisterService(&SecReportsService_ServiceDesc, srv)
}

func _SecReportsService_UpsertAuditQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAuditQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).UpsertAuditQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_UpsertAuditQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).UpsertAuditQuery(ctx, req.(*UpsertAuditQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_GetAuditQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).GetAuditQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_GetAuditQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).GetAuditQuery(ctx, req.(*GetAuditQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_ListAuditQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).ListAuditQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_ListAuditQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).ListAuditQuery(ctx, req.(*ListAuditQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_DeleteAuditQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuditQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).DeleteAuditQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_DeleteAuditQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).DeleteAuditQuery(ctx, req.(*DeleteAuditQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_UpsertSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).UpsertSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_UpsertSecurityReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).UpsertSecurityReport(ctx, req.(*UpsertSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_GetSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).GetSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_GetSecurityReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).GetSecurityReport(ctx, req.(*GetSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_ListSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).ListSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_ListSecurityReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).ListSecurityReport(ctx, req.(*ListSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_DeleteSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).DeleteSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_DeleteSecurityReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).DeleteSecurityReport(ctx, req.(*DeleteSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_RunAuditQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAuditQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).RunAuditQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_RunAuditQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).RunAuditQuery(ctx, req.(*RunAuditQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_RunSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).RunSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_RunSecurityReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).RunSecurityReport(ctx, req.(*RunSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecReportsService_GetSecurityReportDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityReportDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecReportsServiceServer).GetSecurityReportDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecReportsService_GetSecurityReportDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecReportsServiceServer).GetSecurityReportDetails(ctx, req.(*GetSecurityReportDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecReportsService_ServiceDesc is the grpc.ServiceDesc for SecReportsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecReportsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.secreports.v1.SecReportsService",
	HandlerType: (*SecReportsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertAuditQuery",
			Handler:    _SecReportsService_UpsertAuditQuery_Handler,
		},
		{
			MethodName: "GetAuditQuery",
			Handler:    _SecReportsService_GetAuditQuery_Handler,
		},
		{
			MethodName: "ListAuditQuery",
			Handler:    _SecReportsService_ListAuditQuery_Handler,
		},
		{
			MethodName: "DeleteAuditQuery",
			Handler:    _SecReportsService_DeleteAuditQuery_Handler,
		},
		{
			MethodName: "UpsertSecurityReport",
			Handler:    _SecReportsService_UpsertSecurityReport_Handler,
		},
		{
			MethodName: "GetSecurityReport",
			Handler:    _SecReportsService_GetSecurityReport_Handler,
		},
		{
			MethodName: "ListSecurityReport",
			Handler:    _SecReportsService_ListSecurityReport_Handler,
		},
		{
			MethodName: "DeleteSecurityReport",
			Handler:    _SecReportsService_DeleteSecurityReport_Handler,
		},
		{
			MethodName: "RunAuditQuery",
			Handler:    _SecReportsService_RunAuditQuery_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _SecReportsService_GetSchema_Handler,
		},
		{
			MethodName: "RunSecurityReport",
			Handler:    _SecReportsService_RunSecurityReport_Handler,
		},
		{
			MethodName: "GetSecurityReportDetails",
			Handler:    _SecReportsService_GetSecurityReportDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/secreports/v1/secreports_service.proto",
}
